--Gruppen-Mitglieder:
--Mervenur Seyhan: 3115745
--Reyhaneh Ozgoli: 3103822
--Pascal-Klaus Theus: 3107673
--Hossam Al Mustafa: 3053109

--Relationales Schema:

-- Alle Attribute kleinschreiben?
--Artikelangebot[{_aritkelangebotID_,Artikelname, Beschreibungstext, Preis, Artikelbild, Stueckzahl,User.Nickname}]

--User[{_Nickname_,Name,E-Mail}]

--Kaufvorgang [{_TransaktionsID_,Lieferadresse,Stueckzahl,}]

--Wunschliste[{_WID_}]

--Bewertung [{_bid_,rezension,anzahlSterne}]

--schreiben[{_user.nickname_,_kaufvorgang.transaktionsID_,Bewertung.bid}]

--erwerben [{_Artikelangebot.AID_ ,_User.Nickname_,_kaufvorgang.transaktionsID_}]

--einf√ºgen[{_Artikelangebot.AID_, Wunschliste.WID, _User.Nickname_ }]

--entfernen[{_Artikelangebot.AID_, Wunschliste.WID, _User.Nickname_}]



--CREATE TABLE-Statements:

CREATE TABLE user (
	nickname varchar(50) NOT NULL,
	name VARCHAR(50) NOT NULL,
  	email VARCHAR(50) NOT NULL UNIQUE,
  	PRIMARY KEY (nickname)
);

CREATE TABLE artikelangebot (
	aritkelangebotID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	user VARCHAR(50),
	artikelname VARCHAR(50) NOT NULL,
	beschreibungstext VARCHAR(4096) NOT NULL,
	preis INTEGER NOT NULL,
	artikelbild BLOB,
	anzahl INTEGER NOT NULL CHECK(anzahl BETWEEN 0 AND 99),
	PRIMARY KEY (aritkelangebotID),
	FOREIGN KEY (user) REFERENCES user(nickname)
);

CREATE TABLE kaufvorgang (
	tranaktionsID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	user VARCHAR(50),
	lieferadresseID INTEGER,
	aritkelangebotID INTEGER,
	stueckzahl INTEGER NOT NULL,
	PRIMARY KEY (tranaktionsID),
	FOREIGN KEY (user) REFERENCES user(nickname),
	FOREIGN KEY (lieferadresseID) REFERENCES lieferadresse(lieferadresseID), 
	FOREIGN KEY (aritkelangebotID) REFERENCES artikelangebot(aritkelangebotID) 
);

CREATE TABLE lieferadresse(
    lieferadresseID     INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
    stadt               VARCHAR(50) NOT NULL,
    strasse             VARCHAR(50) NOT NULL,
    plz                 INTEGER NOT NULL,
    PRIMARY KEY(lieferadresseID),
);

CREATE TABLE bewertung (
  	bewertungID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	user varchar(50),
	transaktionsID INTEGER,
  	rezension VARCHAR(4096) NOT NULL,
  	anzahlSterne INTEGER NOT NULL CHECK (anzahlSterne BETWEEN 1 AND 5),
  	PRIMARY KEY (bewertungID)
	FOREIGN KEY (user) REFERENCES user(nickname),
	FOREIGN KEY (transaktionsID) REFERENCES kaufvorgang(transaktionsID)
);

CREATE TABLE wunschliste (
	user varchar(50),
	artikelangebot INTEGER,
	PRIMARY KEY (user,artikelangebot),
	FOREIGN KEY (user) REFERENCES user(nickname),
	FOREIGN KEY (artikelangebot) REFERENCES artikelangebot(aritkelangebotID)
);


--Trigger
CREATE TRIGGER updateAnzahl
AFTER INSERT ON kaufvorgang
REFERENCING NEW AS neu
For EACH ROW MODE DB2SQL
BEGIN ATOMIC
	DECLARE oldAnzahl INTEGER;
	DECLARE rest INTEGER;
	SET oldAnzahl = (select anzahl from artikelangebot where artikelangebot.artikelangebotID = neu.artikelangebotID);
	SET rest = oldAnzahl - neu.anzahl;
	UPDATE artikelangebot SET anzahl = rest where artikelangebot.artikelangebotID = neu.artikelangebotID;
END@